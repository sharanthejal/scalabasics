#Functions in Scala
-- Factorial example
-- Like how a variable is defined using block. Function is defined in scala with arguments
-- Factorial 5= 5*4*3*2*1
-- Here no need to say return statement explicitly, return  type is mentioned while defining like variable and the last variable will be returned,
-- And if the invalid return type is returned than specified, type mismatch error will be thrown
def fact(i: Int): Int= {
var res= 1
for(e <- i to 1 by -1)
res *= e
res
}

#Sum Function
def sum(lb: Int, ub: Int) = {
var total=0
for(element<- lb to ub){
total+= element
}
total
}
scala> sum(1,10)
res6: Int = 55
scala> sum(1,100)
res7: Int = 5050
scala> sum(1,1000)
res8: Int = 500500

#Recursive Function
def rFact(i: Int): Int = { if(i==1) 1 else i*rFact(i-1) }


#Nested Functions
-- A function defined inside another function definition. But those functions can't be accessed outside of the outer function
Example:
-- ncr = n!/(n-r)!*r!

def nCr(n: Int, r: Int)= {
 def fact(i: Int): Int= {
  var res= 1
   for(e <- i to 1 by -1)
    res *= e
    res
  }
fact(n)/(fact(n-r)*fact(r))
}
