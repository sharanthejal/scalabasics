#Scala Classes
-- A class in scala can be defined in several ways
-- The below one will be having only one parameterized constructor with the below arguments. And class won't be having any instance variables
-- The source code can be checked using, here no need to use '$' at the end as it is a class
-- When using sbt, when changes are done to some file rebuild the project or module and the changes will be reflected in the sbt console


class Department(departmentId: Int, departmentName:String)
scala> :javap -p Department
Compiled from "Department.scala"
public class Department {
  public Department(int, java.lang.String);
}

-- The below class will have instance variables and they are final, as we are using 'val'. And no setters will be there only getters and constructor.
class Department(val departmentId: Int, val departmentName:String)
scala> :javap -p Department
Compiled from "Department.scala"
public class Department {
  private final int departmentId;
  private final java.lang.String departmentName;
  public int departmentId();
  public java.lang.String departmentName();
  public Department(int, java.lang.String);
}

-- The below class will have instance variables, as we are using 'var'. So both setters and getters will be there.
class Department(var departmentId: Int, var departmentName:String)
scala> :javap -p Department
Compiled from "Department.scala"
public class Department {
  private int departmentId;
  private java.lang.String departmentName;
  public int departmentId();
  public void departmentId_$eq(int);
  public java.lang.String departmentName();
  public void departmentName_$eq(java.lang.String);
  public Department(int, java.lang.String);
}

#Creating Objects
-- Mutable and Immutable objects
-- We have to define the type of the object we are going to store the object while defining itself. Here we are using immutable objects
val d=new Department(1,"Electric")


#Multiple Constructors
-- When multiple constructors are created, other constructors should call the default constructor in the first line of their code.

class OrderItem(
                 orderItemId: Int,
                 orderItemOrderId: Int,
                 orderItemProductId: Int,
                 orderItemQuantity: Int,
                 orderItemSubtotal: Float,
                 orderItemProductPrice: Float
               ) {
  require(
    orderItemSubtotal == orderItemQuantity * orderItemProductPrice, "Invalid orderItemSubtotal " + orderItemSubtotal
  )
  //Additional constructor
  def this(
            orderItemId: Int,
            orderItemOrderId: Int,
            orderItemProductId: Int,
            orderItemQuantity: Int,
            orderItemProductPrice: Float
          ) = {
    //Invoking default constructor
    this(orderItemId,
      orderItemOrderId,
      orderItemProductId,
      orderItemQuantity,
      orderItemQuantity * orderItemProductPrice,
      orderItemProductPrice)
  }
  override def toString: String = "OrderItem(" +
    orderItemId +
    "," +
    orderItemOrderId +
    "," +
    orderItemProductId +
    "," +
    orderItemQuantity +
    "," +
    orderItemSubtotal +
    "," +
    orderItemProductPrice +
    ")"
}

class OrderItem(
                 orderItemId: Int,
                 orderItemOrderId: Int,
                 orderItemProductId: Int,
                 orderItemQuantity: Int,
                 orderItemSubtotal: Float,
                 orderItemProductPrice: Float
               ) {
  require(
    orderItemSubtotal == orderItemQuantity * orderItemProductPrice, "Invalid orderItemSubtotal " + orderItemSubtotal
  )
  //Additional constructor
  def this(
            orderItemId: Int,
            orderItemOrderId: Int,
            orderItemProductId: Int,
            orderItemQuantity: Int,
            orderItemProductPrice: Float
          ) = {
    //Invoking default constructor
    this(orderItemId,
      orderItemOrderId,
      orderItemProductId,
      orderItemQuantity,
      orderItemQuantity * orderItemProductPrice,
      orderItemProductPrice)
  }
  override def toString: String = "OrderItem(" +
    orderItemId +
    "," +
    orderItemOrderId +
    "," +
    orderItemProductId +
    "," +
    orderItemQuantity +
    "," +
    orderItemSubtotal +
    "," +
    orderItemProductPrice +
    ")"
}


scala> :javap -p OrderItem
Compiled from "OrderItem.scala"
public class OrderItem {
  private final int orderItemId;
  private final int orderItemOrderId;
  private final int orderItemProductId;
  private final int orderItemQuantity;
  private final float orderItemSubtotal;
  private final float orderItemProductPrice;
  public java.lang.String toString();
  public static final java.lang.String $anonfun$new$1(OrderItem);
  public OrderItem(int, int, int, int, float, float);
  public OrderItem(int, int, int, int, float);
  private static java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda);
}

scala> val oi=new OrderItem(1,2,3,1,100,10)
java.lang.IllegalArgumentException: requirement failed: Invalid orderItemSubtotal 100.0
  at scala.Predef$.require(Predef.scala:277)
  ... 40 elided

scala> val oi=new OrderItem(1,2,3,5,100,20)
oi: OrderItem = OrderItem(1,2,3,5,100.0,20.0)

scala> val oi=new OrderItem(1,2,3,5,20)
oi: OrderItem = OrderItem(1,2,3,5,100.0,20.0)

